(window.webpackJsonp=window.webpackJsonp||[]).push([["f51e"],{THZ9:function(e,n,t){"use strict";t.r(n),t.d(n,"title",function(){return i}),t.d(n,"default",function(){return p});var s=t("z3IF"),a=t("2Fjn"),o=(t("mXGw"),t("SAVP")),r=t("SGno"),i="xcss: bundler for modular CSS components",l={title:i},c=r.a;function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(c,Object(s.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"I like how ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://browserify.org"}),"browserify")," works on pair with ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://npmjs.org"}),"npm")," — this is what I call\n\"out-of-the-box\" experience. The only issue I have with these tools is they\ndon't care about my CSS. Of course they shouldn't, because every tool has to do\njust one thing and do it well, that's the ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Unix_philosophy"}),"Unix philosophy")," which is followed\nby browserify and npm design decisions."),Object(o.b)("p",null,"Now I want to introduce you ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/andreypopp/xcss"}),"xcss")," — bundler for writing modular CSS\ncomponents in the spirit of browserify. Install it via npm:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"% npm install -g xcss\n")),Object(o.b)("p",null,"And see how to use it:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"% xcss --help\nUsage: xcss [options] entry\n\nOptions:\n  -h, --help       Show this message and exit\n  -v, --version    Print xcss version and exit\n  -d, --debug      Emit source maps\n  -c, --compress   Compress output\n  --class-map      Use class map to remove unused stylesheet rules\n  -t, --transform  Apply transform\n")),Object(o.b)("p",null,"It features:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"support for running rework transforms"),Object(o.b)("li",{parentName:"ul"},"fine-grained source maps generation"),Object(o.b)("li",{parentName:"ul"},"elimination of unused class rules"),Object(o.b)("li",{parentName:"ul"},"class name compression")),Object(o.b)("p",null,"But let's talk about all of these later and speak instead about xcss's main\nselling point which is using ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://nodejs.org/api/modules.html#modules_all_together"}),"Node module resolution algorithm")," to resolve\ndependencies between CSS files. In other words it supports importing\nCSS code from packages installed via npm."),Object(o.b)("p",null,"For example if you need ",Object(o.b)("inlineCode",{parentName:"p"},"normalize.css")," you just do:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),'% npm install normalize-css\n\n% cat ./styles.css\n@import "normalize-css/normalize.css";\n\nbody {\n  background: white;\n}\n\n% xcss ./styles.css > ./bundle.css\n')),Object(o.b)("p",null,"and have ",Object(o.b)("inlineCode",{parentName:"p"},"normalize.css")," bundled in resulted ",Object(o.b)("inlineCode",{parentName:"p"},"bundle.css"),"."),Object(o.b)("p",null,"But easy to install and use ",Object(o.b)("inlineCode",{parentName:"p"},"normalize.css")," isn't the only reason loading from\nnpm packages is so awesome — npm ecosystem is huge and thanks to browserify\nthere are a lot of packages which work in browser."),Object(o.b)("p",null,"Now with xcss you can distribute via npm not only javascript code but also CSS.\nImagine reusable UI widgets which are just a single ",Object(o.b)("em",{parentName:"p"},'"npm install"')," step away\nfrom you to use."),Object(o.b)("p",null,"Of course there needs to be some conventions to appear like prefixing all class\nnames with a package name prefix when writing components which will be\nreleased to public."),Object(o.b)("h2",null,"Source maps generation"),Object(o.b)("p",null,"Another useful feature is source maps generation. To generate bundle with source\nmaps you can use ",Object(o.b)("inlineCode",{parentName:"p"},"--debug")," command line option:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"% xcss --debug ./styles.css > bundle.css\n")),Object(o.b)("p",null,"That way source maps and file sources are inlined into resulted bundle as a chunk of\nbase64 encoded data. That way you don't bother serving them to a browser\nseparately."),Object(o.b)("p",null,"The feature is implemented through my fork of ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/css-stringify"}),"visionmedia/css-stringify"),'\nwhich adds source map generation with "declaration-level" precision.'),Object(o.b)("p",null,"That means that apart from showing correct filenames and line numbers for CSS in\nDOM inspector in Chrome Dev Tools, you can ",Object(o.b)("inlineCode",{parentName:"p"},"⌘ + click")," on a CSS declaration and\nit will show you right the place where it is defined in the original source file\nnot in the bundle."),Object(o.b)("p",null,"Unfortunately I still didn't get my ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/css-stringify/pull/23"}),"pull request")," to css-stringify merged\nupstream. If you feel this feature is important please comment and vote on the\nissue."),Object(o.b)("h2",null,"CSS transforms"),Object(o.b)("p",null,"Writing plain CSS has never been a pleasure. Fortunately there's ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/rework"}),"rework"),"\nlibrary which provides transforms over CSS which implement various\nfeatures found in full-fledged preprocessors like LESS or SASS and even more."),Object(o.b)("p",null,"This includes ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/rework-vars"}),"variable support")," which polyfills upcoming ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://dev.w3.org/csswg/css-variables/"}),"CSS variables\nspecification"),", ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/reworkcss/rework-inherit"}),"rule extensions"),", ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/andreypopp/rework-macro"}),"mixins"),", functions and\n",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/rework#plugins"}),"many")," ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/visionmedia/rework/wiki/Plugins"}),"others"),"."),Object(o.b)("p",null,"While most of rework transforms require some sort of configuration I provide a\nthin wrappers on top of most used ones which configure them with sane default\noptions. This allows using them from a command line:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"% xcss \\\n  --transform xcss/transforms/vars \\\n  --transform xcss/transforms/extend \\\n  ./styles.css > bundle.css\n")),Object(o.b)("p",null,"When using xcss via Node API you can pass rework transforms directly, no\nwrappers are required."),Object(o.b)("h2",null,'"Dead classes" elimination'),Object(o.b)("p",null,"There's an advanced feature which is enabled by ",Object(o.b)("inlineCode",{parentName:"p"},"--class-map")," command line\noption which allows you to pass an information to xcss on which class names are\nin use."),Object(o.b)("p",null,"This information can be used by xcss to eliminate unused CSS rules and so reduce\nthe size of CSS bundle and the time needed to parse and apply CSS declarations\nin a browser at runtime."),Object(o.b)("p",null,"So what's the format of a class map? It's just a JSON object which have class\nnames as keys and values set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),'{\n  ".some-class": true,\n  ".another-class": true\n}\n')),Object(o.b)("p",null,"That's all you need to left only class rules for ",Object(o.b)("inlineCode",{parentName:"p"},".some-class")," and\n",Object(o.b)("inlineCode",{parentName:"p"},".another-class")," in a bundle. Others will be stripped out."),Object(o.b)("p",null,"Of course you don't have to maintain such class maps manually — that would be\ncrazy. Instead there's a ",Object(o.b)("inlineCode",{parentName:"p"},"xcss-classmap")," command line utility which extracts\nclass map from your javascript application if you use some predefined convention\nfor marking up CSS class names in your code."),Object(o.b)("p",null,"The convention is borrowed from ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"http://reactjs.org"}),"React")," UI library which has a little\nfunction called ",Object(o.b)("inlineCode",{parentName:"p"},"cx()"),". There are two ways to use this function. You can call it\nwith a variable number of string literals and it will join them with a space:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"var cx = require('xcss/cx');\n\ncx('.some-class', '.another-class'); // '.some-class .another-class'\n")),Object(o.b)("p",null,"Or for conditional class name inclusion, you can call it with an object literal\nwith class names as keys and boolean expressions as values. Value of boolean\nexpression evaluated at runtime will indicate if corresponding class should be\npresent in a returned class string or not:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"cx({\n  '.some-class': truthy(),\n  '.another-class: false\n}); // '.some-class' if truthy() returns \"truthy\" value\n")),Object(o.b)("p",null,"Remember that in both cases arguments must be literal values so ",Object(o.b)("inlineCode",{parentName:"p"},"xcss-classmap"),"\nutility can statically analyze ",Object(o.b)("inlineCode",{parentName:"p"},"cx()")," calls and return names of classes in a\nresulted class map."),Object(o.b)("p",null,"The basic workflow with ",Object(o.b)("inlineCode",{parentName:"p"},"xcss-classmap")," would look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"% xcss-classmap ./app.js > app.classmap.json\n% xcss --class-map ./app.classmap.json ./styles.css > bundle.css\n")),Object(o.b)("p",null,"That way you get all unused class rules stripped out from ",Object(o.b)("inlineCode",{parentName:"p"},"bundle.css"),"."),Object(o.b)("p",null,"Of course if you use some sort of templating where you define you CSS class\nnames or you write them directly in HTML, you would need to write your own\nversion of ",Object(o.b)("inlineCode",{parentName:"p"},"xcss-classmap")," specifically for it."),Object(o.b)("p",null,"Fortunately, it's quite easy, ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/andreypopp/xcss/blob/master/classmap.js"}),"my implementation")," for extracting ",Object(o.b)("inlineCode",{parentName:"p"},"cx()"),"\ncalls from JavaScript source is just 67 lines of code."),Object(o.b)("h2",null,"Class name compression"),Object(o.b)("p",null,"Another experimental feature is class name compression. It is also implemented\nthrough the ",Object(o.b)("inlineCode",{parentName:"p"},"--class-map")," option. But the format of class map is a little\ndifferent than in the previous case."),Object(o.b)("p",null,"Instead of containing ",Object(o.b)("inlineCode",{parentName:"p"},"true")," values class map should be a mapping from class\nnames to compressed class names:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),'{\n  ".some-class": ".A",\n  ".another-class": ".B"\n}\n')),Object(o.b)("p",null,"Unfortunately this introduces a little more complexity into the build process\nbecause now you need not only to extact class names from your app sources but\nalso to transform it so it will match the compressed class names in the bundled\nCSS."),Object(o.b)("p",null,"Facebook is using this technique and it's quite effective because class names\nare unique and are mostly not affected by gzip compression."),Object(o.b)("p",null,"There's no transform in the open source yet, but I'll deliver it shortly,\n",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/andreypopp"}),"follow me")," on GitHub to know when it happens."),Object(o.b)("h2",null,"API usage"),Object(o.b)("p",null,"So far I only gave examples of using xcss through command-line utility. But\nthat's not the only way to use it. If someone wants to implement a Grunt plugin\nor integrate xcss with some other build systems — there's Node.js API for that\nwhich consists of an only function ",Object(o.b)("inlineCode",{parentName:"p"},"xcss"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"var xcss = require('xcss');\n\nxcss('./styles.css', {debug: true}).pipe(process.stdout);\n")),Object(o.b)("p",null,"the function takes an entry point as its first argument and options (",Object(o.b)("inlineCode",{parentName:"p"},"debug"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"compress"),", ",Object(o.b)("inlineCode",{parentName:"p"},"transform")," and ",Object(o.b)("inlineCode",{parentName:"p"},"classMap")," are possible keys) as its second\nargument."),Object(o.b)("p",null,"It returns a Node stream which you can pipe to process's stdout or into stream\ncreated by ",Object(o.b)("inlineCode",{parentName:"p"},"fs.createWriteStream")," or even over an internet directly to a user's\nbrowser."),Object(o.b)("p",null,"For example, the simplest connect/express middleware would look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{}),"function xcssMiddleware(entry, options) {\n  return function(req, res, next) {\n    xcss(entry, options).on('error', next).pipe(res);\n  }\n}\n")),Object(o.b)("p",null,"And that's it."),Object(o.b)("h2",null,"Why not SASS/LESS/Stylus?"),Object(o.b)("p",null,"The usual response to that is that using plain CSS doesn't require you to learn\nnew syntax and abstractions."),Object(o.b)("p",null,'Let\'s be fair instead and say that using plain CSS is painful and after you\nplugged a bunch of transforms in your xcss/rework workflow you are already far\nahead of what people call "plain CSS".'),Object(o.b)("p",null,"So the real reasons for me are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"performance"),Object(o.b)("li",{parentName:"ul"},"extensibility"),Object(o.b)("li",{parentName:"ul"},"better tooling")),Object(o.b)("h3",null,"Performance"),Object(o.b)("p",null,"All features in xcss except for dependency resolution are optional so you don't\npay for what you don't use."),Object(o.b)("p",null,"In addition to that, css-parse and css-stringify libraries which underlies xcss\nare designed to be fast."),Object(o.b)("p",null,"These all make developer experience quite efficient especially in comparison to\nSASS which is slow as hell."),Object(o.b)("h3",null,"Extensibility"),Object(o.b)("p",null,"xcss can be extended with arbitrary source transformations. Apart from those\nalready in the wild you can write your own for your own exotic needs."),Object(o.b)("p",null,"That has downsides as well because SASS/LESS/Stylus have well defined syntax and\nyou know the exact semantics of each construct. Fortunately most rework\ntransforms are designed in a way which preserves CSS semantics so if you don't\nabuse them everything will be fine."),Object(o.b)("h3",null,"Better tooling"),Object(o.b)("p",null,"Using plain CSS and overall simplicity and modular architecture built on top of\ncss-parse and css-stringify enables better tooling. That allows such wonderful\nutilities like ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/ai/autoprefixer"}),"autoprefixer")," to appear (by the way you can use it with xcss\neasily)."),Object(o.b)("p",null,"Another feature enabled by this approach is a ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/andreypopp/dcompose"}),"build tool")," which can handle\ninterleaved JS and CSS dependency graphs. That would allow you to write\nJavaScript code which can call ",Object(o.b)("inlineCode",{parentName:"p"},"require('./button.css')")," and have ",Object(o.b)("inlineCode",{parentName:"p"},"./button.css"),"\ninserted in a resulted bundle."),Object(o.b)("p",null,"Full-fledged preprocessors like SASS/LESS/Stylus are monolithic and don't allow\nyou to implement such tools without a major effort."))}p.isMDXComponent=!0},or8e:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2013-11-07-xcss-bundler-for-modular-css",function(){var e=t("THZ9");return{page:e.default||e}}])}},[["or8e","5d41","9da1"]]]);