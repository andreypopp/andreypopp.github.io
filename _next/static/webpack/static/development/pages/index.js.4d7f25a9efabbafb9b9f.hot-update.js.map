{"version":3,"file":"static/webpack/static/development/pages/index.js.4d7f25a9efabbafb9b9f.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Text, View, ScrollView, TouchableOpacity } from 'react-native';\nimport * as UI from 'ui';\nimport * as Style from 'ui/Style';\nimport { Content, Link } from 'ui/Content';\nimport { Page } from '../Page';\nimport { Section } from '../Section';\nimport { handlePress } from 'ui/Link';\n\nlet writingsIndex = require('../writings-index.compute');\n\nlet geoloc = (\n  <Link href=\"https://en.wikipedia.org/wiki/Saint_Petersburg\">\n    St.Petersburg, Russia\n  </Link>\n);\n\nlet twitter = (\n  <Link href=\"https://twitter.com/andreypopp\">twitter.com/andreypopp</Link>\n);\n\nlet github = (\n  <Link href=\"https://github.com/andreypopp\">github.com/andreypopp</Link>\n);\n\nlet email = <Link href=\"mailto:8mayday@gmail.com\">8mayday@gmail.com</Link>;\n\nlet WritingLink = ({ writing }) => {\n  let onPress = (e: UIEvent) => handlePress(e, writing.href);\n  let styles = Style.useStyles(theme => ({\n    root: {\n      paddingVertical: 8,\n    },\n    date: {\n      color: theme.dimmedColor,\n      fontSize: '8pt',\n      fontWeight: '800',\n    },\n    title: {\n      textTransform: 'uppercase',\n      color: theme.linkColor,\n      fontWeight: '800',\n    },\n  }));\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"link\"\n      style={styles.root}\n      onPress={onPress}\n    >\n      <Text style={styles.title} href={writing.href}>\n        {writing.title}\n      </Text>\n      <Text style={styles.date}>\n        {writing.date.year}/{writing.date.month}/{writing.date.day}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nlet WritingsArchive = ({ writings }) => {\n  let children = [];\n  let lastYear = null;\n  let styles = Style.useStyles(theme => ({\n    root: {\n      width: '100%',\n    },\n    year: {\n      paddingTop: 30,\n      paddingBottom: 5,\n      borderBottomWidth: 2,\n      borderBottomColor: theme.dimmedColor,\n    },\n    yearText: {\n      color: theme.dimmedColor,\n      fontWeight: '900',\n      fontSize: '8pt',\n    },\n  }));\n\n  for (let item of writings) {\n    if (item.date.year !== lastYear) {\n      lastYear = item.date.year;\n      children.push(\n        <View style={styles.year} key={`year-${lastYear}`}>\n          <Text style={styles.yearText}>{lastYear}</Text>\n        </View>,\n      );\n    }\n\n    children.push(\n      <View key={item.href}>\n        <WritingLink writing={item} />\n      </View>,\n    );\n  }\n  return <View style={styles.root}>{children}</View>;\n};\n\nexport default (props: {| shouldRestoreScrollPosition?: boolean |}) => {\n  let styles = Style.useStyles(theme => ({\n    me: {\n      paddingVertical: 50,\n    },\n  }));\n  let recently = writingsIndex\n    .filter(item => item.date.year >= 2019)\n    .slice(0, 3)\n    .map(item => (\n      <View key={item.href}>\n        <WritingLink writing={item} />\n      </View>\n    ));\n  return (\n    <Page shouldRestoreScrollPosition={props.shouldRestoreScrollPosition}>\n      {recently.lentgh > 0 ? (\n        <Section title=\"Recently\">\n          <View>{recently}</View>\n        </Section>\n      ) : null}\n      <View style={styles.me}>\n        <Content>\n          <p>I'm Andrey Popp, software engineer based in {geoloc}.</p>\n          <p>\n            You can follow me on {twitter} which is mostly about tech. If you\n            have something to say to me directly you can reach me via {email}.\n          </p>\n        </Content>\n      </View>\n      <WritingsArchive writings={writingsIndex} />\n    </Page>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AATA;AAAA;AAeA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAVA;AAAA;AAHA;AAAA;AAAA;AACA;AADA;AAoBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AADA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}