{"version":3,"file":"static/webpack/static/development/pages/how-to-js.js.bd969ed322a26ed3771f.hot-update.js","sources":["webpack:///./pages/how-to-js.md"],"sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport {Post} from '../Post';\n\nexport let title = \"How to write JavaScript\"\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  title\n};\nconst MDXLayout = Post\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`This page is an assorted set of advice on how to write maintainable JavaScript,\nthough some of those can be applied to other programming languages as well.`}</p>\n    <h2>{`Write boring code`}</h2>\n    <p>{`It's that simple. Write boring code. Don't try to be smart, don't trade a bit of\nboilerplate for a tricky one-liner.`}</p>\n    <h3>{`Example: for-of loop instead of map/filter/reduce`}</h3>\n    <p>{`When you need transform an array it might be tempting to use a chain of calls to\n`}<inlineCode parentName=\"p\">{`map()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`filter()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`reduce()`}</inlineCode>{` methods:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let completed = items\n  .filter(item => item.status === 'accepted')\n  .reduce((acc, item) => acc + item.completed, 0);\n`}</code></pre>\n    <p>{`Instead opt-out to use a simple `}<inlineCode parentName=\"p\">{`for-of`}</inlineCode>{` loop:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let completed = 0;\nfor (let item of items) {\n  if (item.status === 'accepted') {\n    completed = completed + item.completed;\n  }\n}\n`}</code></pre>\n    <h2>{`Do not use classes/this`}</h2>\n    <h2>{`Use Flow or TypeScript`}</h2>\n    <h2>{`Test your code`}</h2>\n    <h2>{`Treat your tests like your code`}</h2>\n    <h2>{`Test your interfaces, not implementations`}</h2>\n    <h2>{`Organize code by domain, not by purpose`}</h2>\n    <p>{`Bad:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ ls ./src\ncomponents\npages\nreducers\nactions\n`}</code></pre>\n    <p>{`Good:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ ls ./src\nui\ntasks\nusers\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;A","sourceRoot":""}