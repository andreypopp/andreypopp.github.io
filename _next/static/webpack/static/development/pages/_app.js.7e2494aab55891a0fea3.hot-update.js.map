{"version":3,"file":"static/webpack/static/development/pages/_app.js.7e2494aab55891a0fea3.hot-update.js","sources":["webpack:///../node_modules/ui/Style.js"],"sourcesContent":["// @flow\n\nimport polychrome from 'polychrome';\nimport keyboardFocus from 'keyboard-focus';\n\nif (typeof document !== 'undefined') {\n  keyboardFocus(document);\n}\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nexport type TextStyle = Object;\nexport type ViewStyle = Object;\nexport type color = string;\n\nexport type Theme = {|\n  themeName: string,\n\n  borderColor: color,\n\n  textColor: color,\n  titleColor: color,\n  labelColor: color,\n  linkColor: color,\n\n  dimmedColor: color,\n\n  backgroundColor: color,\n  backgroundSecondaryColor: color,\n  backgroundSelectedColor: color,\n  backgroundHighlightedColor: color,\n\n  success: {\n    backgroundColor: color,\n    textColor: color,\n  },\n  danger: {\n    backgroundColor: color,\n    textColor: color,\n  },\n|};\n\nexport let iOSPalette = {\n  tint: {\n    red: polychrome('rgb(255, 59, 48)'),\n    orange: polychrome('rgb(255, 149, 0)'),\n    yellow: polychrome('rgb(255, 204, 0)'),\n    green: polychrome('rgb(76, 217, 100)'),\n    teal: polychrome('rgb(90, 200, 250)'),\n    blue: polychrome('rgb(0, 122, 255)'),\n    purple: polychrome('rgb(88, 86, 214)'),\n    pink: polychrome('rgb(255, 45, 85)'),\n  },\n};\n\nfunction makeLightTheme(): Theme {\n  let backgroundColor = polychrome('#f9f5f3');\n  let backgroundSecondaryColor = polychrome('rgba(139, 75, 96, 0.10)');\n  let titleColor = polychrome('#9c4663');\n  let textColor = polychrome('#69273e');\n  let linkColor = polychrome('#9c4663');\n  let labelColor = polychrome('#9c4663');\n  return {\n    themeName: 'light',\n\n    backgroundColor: backgroundColor.rgb(),\n    backgroundSecondaryColor: backgroundSecondaryColor.rgb(),\n    backgroundSelectedColor: '#93ddff',\n    backgroundHighlightedColor: '#ffd12f',\n\n    borderColor: backgroundColor.darken(25).rgb(),\n    titleColor: titleColor.rgb(),\n    textColor: textColor.rgb(),\n    labelColor: labelColor.rgb(),\n    linkColor: linkColor.rgb(),\n    dimmedColor: labelColor.fadeOut(40).rgb(),\n\n    success: {\n      backgroundColor: '#008641',\n      textColor: '#F7F7F7',\n    },\n    danger: {\n      backgroundColor: '#FF3B30',\n      textColor: '#F7F7F7',\n    },\n  };\n}\n\nfunction makeDarkTheme(): Theme {\n  let backgroundColor = polychrome('#181818');\n  return {\n    themeName: 'dark',\n\n    backgroundColor: backgroundColor.rgb(),\n    backgroundSecondaryColor: backgroundColor.lighten(70).rgb(),\n    backgroundSelectedColor: '#0b61a5',\n    backgroundHighlightedColor: '#444444',\n\n    borderColor: backgroundColor.lighten(100).rgb(),\n\n    textColor: '#CCCCCC',\n    titleColor: '#CCCCCC',\n    labelColor: '#DDDDDD',\n    linkColor: '#5AC8FA',\n    dimmedColor: '#888888',\n\n    success: {\n      backgroundColor: '#00c861',\n      textColor: '#F7F7F7',\n    },\n    danger: {\n      backgroundColor: '#ff756d',\n      textColor: '#F7F7F7',\n    },\n  };\n}\n\nexport let lightTheme = makeLightTheme();\nexport let darkTheme = makeDarkTheme();\n\nexport let useFocusState = ({\n  trackOnlyKeyboardFocus = false,\n}: {|\n  trackOnlyKeyboardFocus?: boolean,\n|} = {}) => {\n  let [focus, setFocus] = React.useState(false);\n  let props = React.useMemo(() => {\n    let onFocus = (e: UIEvent) => {\n      if (trackOnlyKeyboardFocus) {\n        // $FlowFixMe: ...\n        if (typeof e.target.getAttribute === 'function') {\n          // $FlowFixMe: ...\n          let isKeyboard = e.target.getAttribute('keyboard-focus') != null;\n          if (isKeyboard) {\n            setFocus(true);\n          }\n        } else {\n          setFocus(true);\n        }\n      } else {\n        setFocus(true);\n      }\n    };\n    let onBlur = () => setFocus(false);\n    return { onFocus, onBlur };\n  });\n  return [focus, props];\n};\n\nlet createDummyMediaQueryList = matches => {\n  return {\n    matches,\n    addListener: _listener => {},\n    removeListener: _listener => {},\n  };\n};\n\nexport function useMediaQuery(queryExpression: string, defaultValue?: boolean) {\n  let dependencies = [queryExpression];\n\n  let query = React.useMemo(\n    () =>\n      typeof window !== 'undefined'\n        ? window.matchMedia(queryExpression)\n        : createDummyMediaQueryList(Boolean(defaultValue)),\n    dependencies,\n  );\n\n  let [matches, setMatches] = React.useState(query.matches);\n\n  let handleQueryChange = React.useCallback(e => {\n    setMatches(e.matches);\n  }, dependencies);\n\n  React.useEffect(() => {\n    query.addListener(handleQueryChange);\n    return () => query.removeListener(handleQueryChange);\n  }, dependencies);\n\n  return matches;\n}\n\nlet prefersColorSchemeDark = '(prefers-color-scheme: dark)';\n\nexport function useDarkMode() {\n  return useMediaQuery(prefersColorSchemeDark);\n}\n\nexport type ThemeState = [Theme, (Theme) => void];\n\nexport let useThemeState = (defaultTheme?: Theme) => {\n  let isDarkMode = useDarkMode();\n  let systemTheme = isDarkMode ? darkTheme : lightTheme;\n  let [currentTheme, setTheme] = React.useState<?Theme>(null);\n  let value = React.useMemo(() => {\n    let theme: Theme =\n      currentTheme != null\n        ? currentTheme\n        : defaultTheme != null\n        ? defaultTheme\n        : systemTheme;\n    return [theme, (setTheme: Theme => void)];\n  }, [defaultTheme, systemTheme, currentTheme]);\n  return value;\n};\n\nexport let useTheme = (defaultTheme?: Theme) => {\n  let [theme, _setTheme] = React.useContext(ThemeContext);\n  return theme;\n};\n\nexport let ThemeContext = React.createContext<ThemeState>([\n  typeof window !== 'undefined'\n    ? window.matchMedia(prefersColorSchemeDark).matches\n      ? darkTheme\n      : lightTheme\n    : lightTheme,\n  () => {},\n]);\n\nexport let WithTheme = ({\n  children,\n  defaultTheme,\n}: {\n  children: React.Node,\n  defaultTheme?: Theme,\n}) => {\n  let value = useThemeState(defaultTheme);\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport let useStyles = <T: { [name: string]: Object }>(\n  spec: Theme => T,\n  dependencies?: $ReadOnlyArray<mixed>,\n): $ObjMap<T, <V>(V) => Object> => {\n  let [theme, _setTheme] = React.useContext(ThemeContext);\n  if (dependencies == null) {\n    dependencies = [theme.themeName];\n  } else {\n    dependencies = [...dependencies, theme.themeName];\n  }\n  let styles = React.useMemo(\n    () => StyleSheet.create(spec(theme)),\n    dependencies,\n  );\n  return styles;\n};\n\nexport let useStyle = (\n  spec: Theme => Object,\n  dependencies?: $ReadOnlyArray<mixed>,\n): Object => {\n  let [theme, _setTheme] = React.useContext(ThemeContext);\n  if (dependencies == null) {\n    dependencies = [theme.themeName];\n  } else {\n    dependencies = [...dependencies, theme.themeName];\n  }\n  let styles = React.useMemo(\n    () => StyleSheet.create({ root: spec(theme) }),\n    dependencies,\n  );\n  return styles.root;\n};\n\nexport let styles = StyleSheet.create({\n  focus: {\n    outlineStyle: 'auto',\n    outlineColor: '-webkit-focus-ring-color',\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAnBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AApBA;AAyBA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AASA;AAMA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;;;;A","sourceRoot":""}