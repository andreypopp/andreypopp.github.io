{"version":3,"file":"static/webpack/static/development/pages/index.js.4fcc58bdcdaa0a6ef7f3.hot-update.js","sources":["webpack:///../node_modules/ui/Link.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Text, View, TouchableHighlight } from 'react-native-web';\nimport Router from 'next/router';\nimport { type Props as IconProps } from 'react-feather';\nimport * as Style from './Style';\nimport * as Lang from './Lang';\nimport { Button } from './Button';\n\ntype LinkProps = {|\n  href: string,\n  children: React.Node,\n  onPress?: UIEvent => boolean,\n  style?: Style.TextStyle,\n|};\n\nexport let Link = ({\n  href,\n  children,\n  onPress = Lang.emptyFunctionThatReturns(false),\n  style: extraStyle,\n}: LinkProps) => {\n  let _handlePress = React.useCallback(\n    (e: UIEvent) => handlePress(e, href, onPress),\n    [href, onPress],\n  );\n  let theme = Style.useTheme();\n  let styles = Style.useStyles(theme => ({\n    root: {\n      display: 'inline',\n      borderRadius: 2,\n      paddingHorizontal: 4,\n      marginHorizontal: -4,\n    },\n    label: {\n      color: theme.linkColor,\n      fontWeight: '600',\n      textDecorationLine: 'underline',\n    },\n  }));\n  return (\n    <TouchableHighlight\n      underlayColor={theme.backgroundHighlightedColor}\n      onPress={_handlePress}\n      style={styles.root}\n    >\n      <Text\n        accessibilityRole=\"link\"\n        style={[styles.label, extraStyle]}\n        href={href}\n      >\n        {children}\n      </Text>\n    </TouchableHighlight>\n  );\n};\n\ntype LinkButtonProps = {|\n  href: string,\n  label: string,\n  onPress?: UIEvent => void,\n  renderIcon?: IconProps => React.Node,\n  backgroundColor?: Style.Color,\n  labelColor?: Style.Color,\n|};\n\nexport let LinkButton = ({ href, ...props }: LinkButtonProps) => {\n  let onPress = React.useCallback(\n    (e: UIEvent) => handlePress(e, href, Lang.emptyFunctionThatReturns(false)),\n    [href],\n  );\n  return <Button {...props} onPress={onPress} />;\n};\n\nexport let handlePress = (\n  e: UIEvent,\n  href: string,\n  onPress: ?(UIEvent) => boolean,\n) => {\n  if (isExternalHref(href)) {\n    return;\n  }\n  e.preventDefault();\n  if (onPress != null && onPress(e)) {\n    return;\n  }\n  Router.push(href);\n};\n\nlet isExternalHref = href => {\n  return (\n    href.startsWith('http://') ||\n    href.startsWith('https://') ||\n    href.startsWith('mailto:')\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAPA;AAAA;AAaA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAWA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;;;;A","sourceRoot":""}