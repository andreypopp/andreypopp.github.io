(window.webpackJsonp=window.webpackJsonp||[]).push([["f57e"],{Ccrw:function(e,n,t){"use strict";t.r(n),t.d(n,"title",function(){return r}),t.d(n,"default",function(){return l});var b=t("z3IF"),a=t("2Fjn"),p=(t("mXGw"),t("SAVP")),c=t("SGno"),r="Where выражения в Python",o={title:r},i=c.a;function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(p.b)(i,Object(b.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(p.b)("p",null,"Сейчас на ",Object(p.b)("a",Object(b.a)({parentName:"p"},{href:"http://groups.google.com/group/python-ideas"}),"python-ideas")," снова поднялась тема о включении в\nPython ",Object(p.b)("em",{parentName:"p"},"where"),"-выражений. Об этом уже написан ",Object(p.b)("a",Object(b.a)({parentName:"p"},{href:"http://www.python.org/dev/peps/pep-3150/"}),"PEP-3150"),", но дискуссия зашла\nнесколько дальше изложенного в нём, и на данный момент, ",Object(p.b)("em",{parentName:"p"},"where"),"-выражения\nстали ",Object(p.b)("em",{parentName:"p"},"given"),"-выражениями и выглядят следующим образом:"),Object(p.b)("pre",null,Object(p.b)("code",Object(b.a)({parentName:"pre"},{}),"...\nvalue = a*x*x + b*x + c given:\n    a = compute_a()\n    b = compute_b()\n    c = compute_c()\n... # here a, b and c are UNDEFINED\n")),Object(p.b)("p",null,"Переменные ",Object(p.b)("inlineCode",{parentName:"p"},"a"),", ",Object(p.b)("inlineCode",{parentName:"p"},"b")," и ",Object(p.b)("inlineCode",{parentName:"p"},"c")," доступны только в выражении, которое\nпредшествует ключевому слову ",Object(p.b)("inlineCode",{parentName:"p"},"given"),". Таким образом, этот кусок кода почти\nэквивалентен следующему:"),Object(p.b)("pre",null,Object(p.b)("code",Object(b.a)({parentName:"pre"},{}),"...\na = compute_a()\nb = compute_b()\nc = compute_c()\nvalue = a*x*x + b*x + c\n... # here a, b and c are DEFINED\n")),Object(p.b)("p",null,"За исключением того факта, что в последнем примере мы можем использовать\nпеременные ",Object(p.b)("inlineCode",{parentName:"p"},"a"),", ",Object(p.b)("inlineCode",{parentName:"p"},"b")," и ",Object(p.b)("inlineCode",{parentName:"p"},"c")," и после вычисления ",Object(p.b)("inlineCode",{parentName:"p"},"value"),"."),Object(p.b)("p",null,"В целом, предложение мне нравится:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Повышает читаемость кода. В приведённом примере видно, что является целью\nвычисления (значение в переменной ",Object(p.b)("inlineCode",{parentName:"p"},"value"),"), а что -- вспомогательными\nзначениями (",Object(p.b)("inlineCode",{parentName:"p"},"a"),", ",Object(p.b)("inlineCode",{parentName:"p"},"b")," и ",Object(p.b)("inlineCode",{parentName:"p"},"c"),").")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Мы можем более смело рефакторить выражения для вычисления вспомогательных\nзначений, не боясь, что они будут использоваться ниже по коду. Таким образом,\n",Object(p.b)("em",{parentName:"p"},"given"),'-высказывания помогают, "локализовать" контекст вычислений.')),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Исключается вероятность того, что, в дальнейшем, мы нечаянно (например в\nрезультате опечатки) используем одно из вспомогательных значений и вместо\n",Object(p.b)("inlineCode",{parentName:"p"},"NameError")," получим какой-то неопределённый и неправильный результат\nвычисления. "))),Object(p.b)("p",null,"Но, на мой взгляд, у текущего предложения есть недостаток -- отсутствие ",Object(p.b)("em",{parentName:"p"},"не\nблочного")," варианта для ",Object(p.b)("em",{parentName:"p"},"given"),"-выражений, что исключает возможность их\nиспользования в выражениях для генерации списков и генераторных выражений,\nнапример:"),Object(p.b)("pre",null,Object(p.b)("code",Object(b.a)({parentName:"pre"},{}),"mylist = [y for x in collection if y < 10 given y = f(x)]\n")),Object(p.b)("p",null,"Весь смысл здесь в том, что значение ",Object(p.b)("inlineCode",{parentName:"p"},"y")," вычисляется всего один раз для\nкаждого ",Object(p.b)("inlineCode",{parentName:"p"},"x")," из ",Object(p.b)("inlineCode",{parentName:"p"},"collection")," в противовес:"),Object(p.b)("pre",null,Object(p.b)("code",Object(b.a)({parentName:"pre"},{}),"mylist = [f(x) for x in collection if f(x) < 10]\n")),Object(p.b)("p",null,'Конечно, и сейчас можно "выкрутиться" со следующим решением, но которое, на мой\nвзгляд, всё же проигрывает по читабельности варианту с ',Object(p.b)("em",{parentName:"p"},"given"),":"),Object(p.b)("pre",null,Object(p.b)("code",Object(b.a)({parentName:"pre"},{}),"mylist = [y for y in (f(x) for x in collection) if y < 10]\n")),Object(p.b)("p",null,Object(p.b)("em",{parentName:"p"},"Guido Van Rossum")," уже почти за включение ",Object(p.b)("em",{parentName:"p"},"where"),"-выражений в Python, но, в\nлюбом случае, ещё осталось ждать завершения ",Object(p.b)("a",Object(b.a)({parentName:"p"},{href:"http://www.python.org/dev/peps/pep-3003/"}),"моратория")," на изменения\nв синтаксисе языка."))}l.isMDXComponent=!0},chuP:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2010-07-21-python-where-statement",function(){var e=t("Ccrw");return{page:e.default||e}}])}},[["chuP","5d41","9da1"]]]);