(window.webpackJsonp=window.webpackJsonp||[]).push([["7528"],{GKB9:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2010-07-16-generic-multidispatching",function(){var n=t("Psv1");return{page:n.default||n}}])},Psv1:function(n,e,t){"use strict";t.r(e),t.d(e,"title",function(){return b}),t.d(e,"default",function(){return u});var r=t("z3IF"),i=t("2Fjn"),a=(t("mXGw"),t("SAVP")),c=t("SGno"),b="Мультидиспетчеризация с generic",p={title:b},s=c.a;function u(n){var e=n.components,t=Object(i.a)(n,["components"]);return Object(a.b)(s,Object(r.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Сегодня выпустил версию 0.1 библиотеки для обобщённого программирования\n(generic programming) на языке Python с оригинальным названием ",Object(a.b)("em",{parentName:"p"},"generic"),"."),Object(a.b)("p",null,"Одно из возможных применений этой библиотеки -- создание\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Multiple_dispatch"}),"мультиметодов"),"."),Object(a.b)("p",null,"Мультиметод -- это такая функция, которая меняет своё поведение в зависимости\nот типов переданных ей аргументов, то есть, действует примерно следующим\nобразом:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'def show(arg):\n    if isinstance(arg, str):\n        return show_str(arg)\n    elif isinstance(arg, int):\n        return show_int(arg)\n\ndef show_str(arg):\n    return "str: %s" % arg\n\ndef show_int(arg):\n    return "int: %d" % arg\n')),Object(a.b)("p",null,"С использование generic это делается так:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'from generic.multidispatch import multifunction\n\n@multifunction(str)\ndef show(arg):\n    return "str: %s" % arg\n\n@show.when(int)\ndef show(arg):\n    return "int: %d" % arg\n\nshow(1)     # returns \'int: 1\'\nshow("s")   # returns \'str: s\'\nshow([])    # raises TypeError\n')),Object(a.b)("p",null,"На мой взгляд, получается более элегантно. К тому же, мы всегда можем расширить\nнаш мультиметод другими реализациями для других типов аргумента, чего не\nсделаешь с функцией из первого примера."),Object(a.b)("p",null,"Также можно определять мультиметоды с диспетчеризацией по нескольким аргументам:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"@multifunction(int, int)\ndef add(x, y):\n    return x + y\n\n@add.when(str, str)\ndef add(x, y):\n    return add(int(x), int(y))\n")),Object(a.b)("p",null,'К сожалению, пока библиотека может создавать мультиметоды только из обычных\nфункций (не методов), такие вот получаются "мультифункции". В дальнейшем эту\nситуацию планируется исправить.'),Object(a.b)("p",null,"Установить generic можно с помощью ",Object(a.b)("inlineCode",{parentName:"p"},"easy_install")," обычным образом:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"easy_install generic\n")),Object(a.b)("p",null,"Репозиторий с исходным кодом и багтрекер находится на ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://github.com/andreypopp/generic"}),"github"),".\nПока там около 200 строк кода вместе с докстрингами и примерно такое же\nколичество тестов."))}u.isMDXComponent=!0}},[["GKB9","5d41","9da1"]]]);