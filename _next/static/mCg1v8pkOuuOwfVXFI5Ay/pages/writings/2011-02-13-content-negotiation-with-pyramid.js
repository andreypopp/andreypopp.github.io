(window.webpackJsonp=window.webpackJsonp||[]).push([["ee75"],{aiPI:function(e,n,t){"use strict";t.r(n),t.d(n,"title",function(){return c}),t.d(n,"default",function(){return l});var a=t("z3IF"),r=t("2Fjn"),p=(t("mXGw"),t("SAVP")),b=t("SGno"),c="Pyramid: content negotiation",i={title:c},o=b.a;function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(p.b)(o,Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(p.b)("p",null,"Хочу рассказать о том, как с помощью ",Object(p.b)("a",Object(a.a)({parentName:"p"},{href:"http://docs.pylonsproject.org/projects/pyramid/1.0/"}),"Pyramid")," организовать приложение,\nкоторое будет возвращать одни и те же данные в различных форматах в зависимости\nот некоторых параметров запроса. Я приведу пару примеров, на мой взгляд\nнаиболее часто встречающихся:"),Object(p.b)("ol",null,Object(p.b)("li",{parentName:"ol"},Object(p.b)("p",{parentName:"li"},"Возвращаем данные в разных формате в зависимостри от суффикса URL --\nнапример, при обращении по следующим адресам:"),Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"api/user.json")," -- приложение вернёт нам данные о пользователе в\nформате JSON.\n"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"api/user")," -- аналогичные данные мы получим в формате HTML, пригодном\nдля просмотра в браузере."))),Object(p.b)("li",{parentName:"ol"},Object(p.b)("p",{parentName:"li"},"Проделываем аналогичную штуку, но теперь уже определяя в каком формате нам\nнужно возвратить данные по значению HTTP заголовка ",Object(p.b)("em",{parentName:"p"},"Accept"),":"),Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"text/html")," -- возвращаем HTML.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"p"},"application/json")," -- соответственно JSON."))),Object(p.b)("p",{parentName:"li"}," Таким образом, мы можем использовать один и тот же URL и при этом отдавать\nданные в двух различных форматах."))),Object(p.b)("h2",null,"Как бы я сделал это раньше"),Object(p.b)("p",null,"Конечно, мы можем сделать две аналогичные вьюшки и повесить их на два разных\nURL-шаблона:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{}),'def api_user_json(request):\n    data = {"username": "andreypopp"}\n    rendered = json.dumps(data)\n    return Response(rendered, content_type="application/json")\n\ndef api_user_html(request):\n    data = {"username": "andreypopp"}\n    rendered = template.render(data)\n    return Response(rendered)\n')),Object(p.b)("p",null,"или добавить в код одной вьюшки проверку значения заголовка ",Object(p.b)("em",{parentName:"p"},"Accept"),":"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{}),'def api_user(request):\n    data = {"username": "andreypopp"}\n    if request.accept == "application/json":\n        rendered = json.dumps(data)\n        return Response(rendered)\n    else:\n        rendered = template.render(data)\n        return Response(rendered)\n        \n')),Object(p.b)("p",null,"но у этих решений есть недостатки:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Это просто не красиво и совсем не ",Object(p.b)("a",Object(a.a)({parentName:"p"},{href:"http://en.wikipedia.org/wiki/Don't_repeat_yourself"}),"DRY"),".")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Такие вьюшки сложно тестировать -- на выходе мы получаем или отрендеренный\nшаблон или строчку JSON, что очень неудобно для интроспекции."))),Object(p.b)("p",null,"Наверное, нам стоит поискать другое решение проблемы."),Object(p.b)("h2",null,"Решение в стиле Pyramid"),Object(p.b)("p",null,"К счастью, вьюшка в Pyramid не должна обязательно возвращать объект типа\n",Object(p.b)("inlineCode",{parentName:"p"},"Response")," -- она может возвратить просто словарик с данными, но только при\nусловии, что она будет использоваться в паре с ",Object(p.b)("em",{parentName:"p"},"рендерером (renderer)"),"."),Object(p.b)("p",null,Object(p.b)("a",Object(a.a)({parentName:"p"},{href:"http://docs.pylonsproject.org/projects/pyramid/1.0/narr/renderers.html"}),"Рендерер")," -- это компонент, который ответственен за конвертацию результата\nвыполнения вьюшки -- словарика с данными -- в объект типа ",Object(p.b)("inlineCode",{parentName:"p"},"Response"),". В\nPyramid есть встроенный рендерер для конвертации в JSON и, при этом, любой\nшаблон нашего приложения может также выступать в роли рендерера (результат\nвыполнения вьюшки будет использован как контекст для рендеринга шаблона)."),Object(p.b)("p",null,"Что это даёт нам -- мы можем, определив всего лишь одну вьюшку, которая просто\nдостаёт данные из БД и возвращает их ввиде словарика:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{}),'def api_user(request):\n    data = {"username": "andreypopp"}\n    return data\n')),Object(p.b)("p",null,"зарегистрировать эту вьюшку с двумя разными URL используя два разных рендерера:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{}),'config = Configurator()\nconfig.add_route("api_user", "/api/user", api_user,\n    renderer="templates/user.jinja2")\nconfig.add_route("api_user_json", "/api/user.json", api_user,\n    renderer="json")\n')),Object(p.b)("p",null,"или мы можем проделать тоже самое используя один URL и два разных предиката\n",Object(p.b)("em",{parentName:"p"},"accept"),":"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{}),'config = Configurator()\nconfig.add_route("api_user", "/api/user", api_user,\n    renderer="templates/user.jinja2")\nconfig.add_route("api_user", "/api/user", api_user, \n    renderer="json", accept="application/json")\n')),Object(p.b)("p",null,"Готово, желаемый результат достигнут. При этом, мы можем с лёгкостью\nпротестировать нашу вьюшку, потому что в ",Object(p.b)("em",{parentName:"p"},"unit"),"-тестах она будет возвращать нам\nсловарик c данными, который подлежит интроспекции в полной мере."))}l.isMDXComponent=!0},uo1g:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2011-02-13-content-negotiation-with-pyramid",function(){var e=t("aiPI");return{page:e.default||e}}])}},[["uo1g","5d41","9da1"]]]);