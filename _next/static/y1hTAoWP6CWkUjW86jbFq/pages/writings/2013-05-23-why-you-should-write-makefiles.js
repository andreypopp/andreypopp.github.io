(window.webpackJsonp=window.webpackJsonp||[]).push([["687a"],{FBep:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2013-05-23-why-you-should-write-makefiles",function(){var e=t("LVHT");return{page:e.default||e}}])},LVHT:function(e,n,t){"use strict";t.r(n),t.d(n,"title",function(){return l}),t.d(n,"default",function(){return c});var a=t("z3IF"),o=t("2Fjn"),s=(t("mXGw"),t("SAVP")),i=t("SGno"),l="Why you should write Makefiles",p={title:l},r=i.a;function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)(r,Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"There are a couple of reasons you should use ",Object(s.b)("inlineCode",{parentName:"p"},"make")," utility and write Makefiles\nfor your projects, even if it is 2013 now and you use modern programming\nlanguages and platforms."),Object(s.b)("h2",null,"It's easy"),Object(s.b)("p",null,"Your build process usually can be described in terms of sequences of commands\nwith some dependencies between. ",Object(s.b)("inlineCode",{parentName:"p"},"make")," captures this naturally as a set of build\ntargets (with dependencies) and associated snippets of shell script (usually\n",Object(s.b)("inlineCode",{parentName:"p"},"sh"),"):"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"lib/app.js:\n  coffee -cp src/app.coffee > lib/app.js\n\napp.min.js: lib/app.js\n  uglify-js lib/app.js > app.min.js\n")),Object(s.b)("p",null,"This reads as: to build ",Object(s.b)("inlineCode",{parentName:"p"},"app.min.js")," you would need to build ",Object(s.b)("inlineCode",{parentName:"p"},"lib/app.js")," first,\nrun ",Object(s.b)("inlineCode",{parentName:"p"},"coffee ...")," to build the former and ",Object(s.b)("inlineCode",{parentName:"p"},"uglify-js ...")," for the latter. To run\njust issue"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"% make app.min.js\n")),Object(s.b)("p",null,"Shell was designed exactly to perform command line tasks so it is the most\nefficient and boilerplate-free way to execute a bunch of commands sequentially\nand even compose pipelines of them."),Object(s.b)("blockquote",{class:"twitter-tweet"},Object(s.b)("p",null,"if you want to execute some commands in order it's really hard to do any better than bash"),"— James Halliday (@substack) ",Object(s.b)("a",{href:"https://twitter.com/substack/status/337311603911450624"},"May 22, 2013")),Object(s.b)("p",null,"You write recipes using shell scripting language, ",Object(s.b)("inlineCode",{parentName:"p"},"make")," only organizes recipes\ninto dependency graph and rebuilds incrementally only needed parts of it (by\ncomparing timestamps of targets and their dependencies)."),Object(s.b)("h2",null,"But shell scripting is hard"),Object(s.b)("p",null,"You might say that but in fact it's not."),Object(s.b)("p",null,"If you still think so then you probably didn't even try it. I think, if you use\ncommand line as a part of your development process you should at least give it a\nshot."),Object(s.b)("p",null,"Yes, shell scripting has some quirks but so does any programming language and I\nwouldn't say that using shell is more or less painful than using any other\nlanguage."),Object(s.b)("p",null,"Again, give it at least a try — shell scripting documentation fits in one or two\nman pages."),Object(s.b)("h2",null,"Makefiles are good for encapsulation"),Object(s.b)("p",null,"The second reason to use ",Object(s.b)("inlineCode",{parentName:"p"},"make")," is encapsulation. Let me describe what this\nmeans."),Object(s.b)("p",null,"Nowadays most platforms have their own build tools. So does Python (distutils,\nsetuptools, pip), Ruby (gem, bundle), Node.js (npm) and a bunch of others and\nthat's completely fine. Such build tools usually perform much better for their\nown platforms because they were designed exactly for these."),Object(s.b)("p",null,"But even if I work on Python or Node.js project I would still consider using\nMakefiles and writing targets to wrap those build tools' commands into ",Object(s.b)("inlineCode",{parentName:"p"},"make"),"\ntargets:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"install link publish:\n  npm $@\n")),Object(s.b)("p",null,"Why? Just for the sake of encapsulation — if in a future some of the actions\nwill require some additional commands to execute I'll just change this action's\nrecipe to be something more than a call to ",Object(s.b)("inlineCode",{parentName:"p"},"npm"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"publish:\n  git tag `node -pe 'require(\"./package.json\").version'`\n  npm publish\n")),Object(s.b)("p",null,"and I will not be required to change how I run such action — Makefile allows me\nto define an interface to running build processes."),Object(s.b)("p",null,"If you want to know more how I use ",Object(s.b)("inlineCode",{parentName:"p"},"make")," for npm projects you can read one of\nmy previous posts on the subject — ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"http://andreypopp.com/posts/2013-05-16-makefile-recipes-for-node-js.html"}),"Makefile recipies for Node.js packages"),"."),Object(s.b)("h2",null,"What about Windows OS?"),Object(s.b)("p",null,"Yes, ",Object(s.b)("inlineCode",{parentName:"p"},"make")," is an alien in a Windows environment but so is command line."),Object(s.b)("p",null,"But if a window developer is going to be serious with a command line then they\nusually get ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.cygwin.com/"}),"cygwin")," installed and there along comes ",Object(s.b)("inlineCode",{parentName:"p"},"make")," utility."))}c.isMDXComponent=!0}},[["FBep","5d41","9da1"]]]);