(window.webpackJsonp=window.webpackJsonp||[]).push([["d15c"],{lhmj:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2013-02-03-on-twitter-flight",function(){var e=n("sbO3");return{page:e.default||e}}])},sbO3:function(e,t,n){"use strict";n.r(t),n.d(t,"title",function(){return r}),n.d(t,"default",function(){return l});var o=n("z3IF"),i=n("2Fjn"),a=(n("mXGw"),n("SAVP")),s=n("SGno"),r="On Twitter Flight",c={title:r},h=s.a;function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)(h,Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Twitter relecently released a new piece of open source software — ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://twitter.github.com/flight/"}),"Twitter\nFlight"),', "a lightweight, component-based JavaScript framework" as it\'s stated on\nits page.'),Object(a.b)("p",null,"The framework aims to organize the part of an application code which maps\nbehaviour to DOM, so it loosely corresponds to what Backbone.View does. Flight\ncomponents are plain objects which wraps DOM nodes and provide some logic to\nthem."),Object(a.b)("p",null,"Now the interesting part — Flight doesn't allow components to hold references to\neach other and thus the only way to communicate between them is by using events.\nThe intent behind this design decision is to force developers to create highly\nreusable components."),Object(a.b)("p",null,"While the idea of building loosely coupled UI components feels right, I don't\nthink that pushing it to that maxima is a good thing."),Object(a.b)("p",null,"First, it is hard debug such systems — if there are events instead of method\ncalls then there will be no proper stacktraces in case of errors. Even if events are\nsynchronous you will get stacktraces which interweave Flight's code with you own\napplication's code so it is much harder to deal with."),Object(a.b)("p",null,"Second, evented code is hard to read and follow — instead of method calls you\nsee events being triggered into nowhere."),Object(a.b)("p",null,'The right balance I think would be to have separate communication methods for\n"parent-child" and "child-parent" component relationships.'),Object(a.b)("p",null,'Parent components should communicate with its children via direct methods calls.\nIt does make sense to me because parent components already know about their\nchildren — they created them during instantiation phase of got them through the\nconstructor arguments. So it doesn\'t harm "loosly-coupled" architecture at all.'),Object(a.b)("p",null,"Children shouldn't be aware of its parents so \"child-parent\" communication\nstrategy is the point where using events is acceptable and useful for\ncomponents' reusability. That means you shouldn't hold references to a parent\ncomponent and only trigger events so other components up through a component\nhierarchy could react on them."),Object(a.b)("p",null,"Speaking of Backbone, I recently released ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/andreypopp/backbone.viewevents"}),"Backbone.ViewEvents")," module which\nhelps building up \"child-parent\" evented communication without maintaining view\nhierarchy manually and setting up event propagation between views. This is done\nthrough the swapping of Backbone.Events to a schema where events are DOM events\nand are triggered on a view's element. That way we get event bubbling for free\nand a view hierarchy inferred from views' positions in the DOM tree."))}l.isMDXComponent=!0}},[["lhmj","5d41","9da1"]]]);