(window.webpackJsonp=window.webpackJsonp||[]).push([["6e14"],{UEFi:function(e,t,n){"use strict";n.r(t),n.d(t,"title",function(){return s}),n.d(t,"default",function(){return p});var o=n("z3IF"),a=n("2Fjn"),r=(n("mXGw"),n("SAVP")),i=n("SGno"),s="routr: intro",l={title:s},c=i.a;function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(c,Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Common web application written in Python has view/controller layer (I will use a\nterm ",Object(r.b)("em",{parentName:"p"},"view")," further) which is almost entirely consist of code which:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"deserializes a request object into some data structures")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"does some work with the deserialized data structures and produces some\nresult")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"serializes the produced result into a response object"))),Object(r.b)("p",null,"Note, that only point 3. here represents some meaningful work done by a view —\nothers are just a ",Object(r.b)("em",{parentName:"p"},"boilerplate"),"."),Object(r.b)("p",null,"The other common problem you can find in view functions — they are all take some\n",Object(r.b)("em",{parentName:"p"},"magical object")," called a request as an argument. That means you cannot reason\nabout what data this function needs to be passed just by looking at its\nsignature. Even more, sometimes views depend on request object which was\npreviously processed by some pipeline of middlewares or something like that.\nThese all make view functions ",Object(r.b)("em",{parentName:"p"},"difficult to compose")," — it's just not safe to\ncall view from another view."),Object(r.b)("h2",null,"Solution"),Object(r.b)("p",null,"The solution I see is simple — ",Object(r.b)("em",{parentName:"p"},"you don't need to write views at all")," — no views\nmeans no boilerplate and no problem composing them."),Object(r.b)("p",null,"How is that? Ok, you still have to do serialization/deserialization stuff\nand execute some application specific code somewhere but let's..."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Refactor serialization/deserialization code into reusable declarative\npieces.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Define an API as a set of simple Python functions not "fancy" views.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Configure how a WSGI request should map on an API."))),Object(r.b)("p",null,"As an implementation of these I have a library — ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"http://routr.rtfd.org"}),"routr"),". It depends on\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"http://webob.org"}),"WebOb")," for providing request/response abstractions over WSGI."),Object(r.b)("h2",null,"Defining routes"),Object(r.b)("p",null,"First you need to define routes, for that routr have a set of combinators:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"from routr import GET, POST, route\nfrom routr.schema import qs, form\nfrom myapp import api\n\nroutes = route(\n    GET('/', qs(page=int), api.get_news),\n    GET('/latest_comments', api.get_latest_comments)\n    GET('/{slug}', qs(fulltext=bool), api.get_news_item),\n    POST('/{slug}/comments', form(comment=str), api.new_comment))\n")),Object(r.b)("p",null,"This structures now can be used to map WSGI requests to API functions defined in\n",Object(r.b)("inlineCode",{parentName:"p"},"myapp.api")," module; ",Object(r.b)("inlineCode",{parentName:"p"},"qs")," and ",Object(r.b)("inlineCode",{parentName:"p"},"form")," are called guards — they extract data from\nrequest and pass it further so then it can be used to call API functions."),Object(r.b)("h2",null,"WSGI application"),Object(r.b)("p",null,"Routr is a library — it means you should call it and not vice-versa. For that\nyou need to define a WSGI application yourself — thanks to WebOb's request and\nresponse objects it's not that difficult."),Object(r.b)("pre",null,"from routr import GET, POST, routr from myapp import api from webob import Request, Response def application(environ, start_response): request = Request",Object(r.b)("span",{class:"line"},"trace = routes(request)"),Object(r.b)("span",{class:"line"},"response = trace.target(*trace.args, **trace.kwargs)"),"if not isinstance(response, Response):",Object(r.b)("span",{class:"line"},"response = Response(json=response)"),"return response(environ, start_response)"),Object(r.b)("p",null,"The line ",Object(r.b)("span",{class:"lineref"},"1")," shows how to route a ",Object(r.b)("inlineCode",{parentName:"p"},"request")," using\npreviously defined ",Object(r.b)("inlineCode",{parentName:"p"},"routes")," structure — the result is a ",Object(r.b)("em",{parentName:"p"},"trace")," object which\nkeeps information and extracted data from WSGI request needed for currently\nmatched route."),Object(r.b)("p",null,"Then goes actual call ",Object(r.b)("span",{class:"lineref"},"2")," to an API function which is\nprovided via ",Object(r.b)("inlineCode",{parentName:"p"},"target")," attribute of a trace object using arguments extracted from\na request during routing. For example ",Object(r.b)("inlineCode",{parentName:"p"},"GET /twitter-goes-down?fulltext=true"),"\nwill trigger a call to ",Object(r.b)("inlineCode",{parentName:"p"},"api.get_news_item('twitter-goes-down', fulltext=True)"),"\nand so on."),Object(r.b)("p",null,"Finally if you return from your API function object which is not a response —\nand usually it is so — it will be converted ",Object(r.b)("span",{class:"lineref"},"3")," to\nJSON and served with ",Object(r.b)("inlineCode",{parentName:"p"},"application/json")," mime type to a client. Of course you can\ndefine more sophisticated rules here — that one is just for the example."),Object(r.b)("p",null,"This simple schema allows you to build your application from small reusable\npieces of code — both for request deserialization/validation and for application\nlogic itself."))}p.isMDXComponent=!0},UOM5:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2012-09-05-routr-intro",function(){var e=n("UEFi");return{page:e.default||e}}])}},[["UOM5","5d41","9da1"]]]);