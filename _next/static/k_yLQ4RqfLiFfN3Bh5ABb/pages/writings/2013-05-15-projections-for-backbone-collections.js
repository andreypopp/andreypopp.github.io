(window.webpackJsonp=window.webpackJsonp||[]).push([["279e"],{RgvC:function(e,n,t){"use strict";t.r(n),t.d(n,"title",function(){return r}),t.d(n,"default",function(){return b});var o=t("z3IF"),a=t("2Fjn"),i=(t("mXGw"),t("SAVP")),l=t("SGno"),r="Projections for Backbone.Collection",c={title:r},s=l.a;function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)(s,Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Backbone provides an efficient abstraction to manage a collection of objects,\nthe ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"http://backbonejs.org/#Collection"}),"Backbone.Collection")," class. It does exactly two things: syncs data with a\nserver and triggers events on every modification made. The last thing makes it\nvery useful for constructing UIs which visualize a set of objects which changes\nin time, be it a collection of email messages or a list of friends."),Object(i.b)("p",null,"When it comes to a real world scenario, those two use cases usually never go\ninto a single collection — you almost certainly would want to sync one\ncollection and use another for a UI."),Object(i.b)("p",null,"Some use cases are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You use one collection as an extensive cache and sync it to a server but\nwant to visualize just a part of it to prevent information overload")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'You want to treat some objects in a collection as "dirty" and do not sync\nthem to a server, note that you still want to show them in a UI')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'You want to present additional views which features just "latest" or\n"top-scored" items from a collection')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You want to present several variants of ordering of objects in a collection"))),Object(i.b)("p",null,"These are just of top of my head, but I'm sure there can be a lot more such use\ncases."),Object(i.b)("p",null,"Now the interesting part — how to implement such behaviours with\nBackbone.Collection? As it is usually done with such a modular and rich\necosystem like Backbone's one there should be a plugin for that —\n",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/andreypopp/backbone.projections"}),"Backbone.Projections"),"."),Object(i.b)("p",null,"Backbone.Projections is a set of composable projections for Backbone.Collection.\nWhat is projection of a collection? It's an another collection which stays in sync with an\nunderlying collection but do it in its own way, like presenting elements in a\ndifferent order or presenting just a subset of elements."),Object(i.b)("p",null,"Let's see how Backbone.Projections helps us capture UI patternts we identified\nabove."),Object(i.b)("h2",null,"Sorted and reversed projections"),Object(i.b)("p",null,"The first and the most simplest one of the projections is ",Object(i.b)("inlineCode",{parentName:"p"},"Sorted")," projection.\nIt allows to redefine an order of elements in an underlying collection:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"{Collection} = require 'backbone'\n{Sorted} = require 'backbone.projections'\n\na = new Model(ord: 2)\nb = new Model(ord: 1)\nc = new Model(ord: 3)\n\nunderlying = new Collection [a, b, c]\n\nsorted = new Sorted(underlying,\n  comparator: (model) -> model.get('ord'))\n")),Object(i.b)("p",null,"This way ",Object(i.b)("inlineCode",{parentName:"p"},"sorted")," contains all the models which ",Object(i.b)("inlineCode",{parentName:"p"},"underlying")," contains but in an\norder defined by ",Object(i.b)("inlineCode",{parentName:"p"},"ord")," key of a model. But what's more important, ",Object(i.b)("inlineCode",{parentName:"p"},"sorted")," will\nmaintain itself in sync with ",Object(i.b)("inlineCode",{parentName:"p"},"underlying")," collection."),Object(i.b)("p",null,"You can experiment with adding an element to\nunderlying at position 1 or adding to underlying at the end. Both\n",Object(i.b)("inlineCode",{parentName:"p"},"underlying")," and ",Object(i.b)("inlineCode",{parentName:"p"},"sorted")," collections will receive new elements but those\nelements will be inserted at different positions."),Object(i.b)("p",null,"There's also a special case of ",Object(i.b)("inlineCode",{parentName:"p"},"Sorted")," projection — ",Object(i.b)("inlineCode",{parentName:"p"},"Reversed")," which maintains\nreversed order relative to an underlying collection."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"{Reversed} = require 'backbone.projections'\nunderlying = new Collection([a, b, c],\n  comparator: (model) -> model.get('ord'))\n\nreversed = new Reversed(underlying)\n")),Object(i.b)("p",null,"Again, you can experimenting with ",Object(i.b)("a",{class:"button reversed-add-at-end"},"adding an\nelement to ",Object(i.b)("em",null,"underlying")," at the end")," and see how ",Object(i.b)("inlineCode",{parentName:"p"},"reversed")," inserts\nthis element in front."),Object(i.b)("h2",null,"Capped projection"),Object(i.b)("p",null,"There's ",Object(i.b)("inlineCode",{parentName:"p"},"Capped"),' projection which represents a capped (limited by number of\nelements) subset of an underlying collection. You will find this useful for\ndoing pagination or just for presenting "last" or "most liked" items.'),Object(i.b)("p",null,"Note that ",Object(i.b)("inlineCode",{parentName:"p"},"Capped")," also accepts a custom ",Object(i.b)("inlineCode",{parentName:"p"},"comparator")," as an option so you can\nmaintain a different order inside a projection. By default, order used in\nan underlying collection is used."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"{Capped} = require 'backbone.projections'\n\nunderlying = new Collection([a, b, c],\n  comparator: (model) -> model.get('ord'))\n\ncapped = new Capped(underlying,\n  cap: 2,\n  comparator: (model) -> - model.get('ord'))\n")),Object(i.b)("p",null,"As you can see we use ",Object(i.b)("inlineCode",{parentName:"p"},"capped")," collection to represent just 2 elements using a\ndescending order by an ",Object(i.b)("inlineCode",{parentName:"p"},"ord")," attribute."),Object(i.b)("p",null,"Try ",Object(i.b)("a",{class:"button capped-add-at-end"},"adding an element to ",Object(i.b)("em",null,"underlying"),"\nat the end")," and see how ",Object(i.b)("inlineCode",{parentName:"p"},"capped")," maintains its state."),Object(i.b)("p",null,"There's also a ",Object(i.b)("inlineCode",{parentName:"p"},".resize(newSize)")," method which allows you to specify a new size\nfor a ",Object(i.b)("inlineCode",{parentName:"p"},"Capped")," projection: try ",Object(i.b)("a",{class:"button capped-upsize"},"upsize")," or ",Object(i.b)("a",{class:"button capped-downsize"},"downsize")," the example above."),Object(i.b)("h2",null,"Filtered projection"),Object(i.b)("p",null,"Sometimes you want to limit a collection by some predicate, for that use case\nthere's ",Object(i.b)("inlineCode",{parentName:"p"},"Filtered")," collection."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"{Filtered} = require 'backbone.projections'\n\nunderlying = new Collection([a, b, c],\n  comparator: (model) -> model.get('ord'))\n\nfiltered = new Filtered(underlying,\n  filter: (model) -> model.get('ord') % 2 == 0)\n")),Object(i.b)("p",null,"In this example we constructs a ",Object(i.b)("inlineCode",{parentName:"p"},"filtered")," projection which only contains\nelements from an underlying collection with even ",Object(i.b)("inlineCode",{parentName:"p"},"ord")," attribute."),Object(i.b)("p",null,"Try ",Object(i.b)("a",{class:"button filtered-add"},"adding an element to ",Object(i.b)("em",null,"underlying")," at\nthe end")," and see how ",Object(i.b)("inlineCode",{parentName:"p"},"filtered")," collects only models with even numbers."),Object(i.b)("h2",null,"Filtered projections with complex predicates"),Object(i.b)("p",null,"Filtered projection can be a useful building block for very sophisticated\nstructures — we will try to implement a projection which represents a\n",Object(i.b)("em",{parentName:"p"},"difference")," between two given collections."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"class Difference extends Filtered\n\n  constructor: (underlying, subtrahend, options = {}) ->\n    options.filter = (model) ->\n      not subtrahend.contains(model)\n    super(underlying, options)\n\n    this.listenTo subtrahend,\n      add: (model) =>\n        this.remove(model) if this.contains(model)\n      remove: (model) =>\n        this.add(model) if this.underlying.contains(model)\n      reset: this.update\n")),Object(i.b)("p",null,"As you can see there's just 9 lines of code required to do that. Let's see a\ndemo"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"collA = new Collection [a, b, c]\ncollB = new Collection [b]\ndiff = new Difference(collA, collB)\n")),Object(i.b)("p",null,"Now ",Object(i.b)("inlineCode",{parentName:"p"},"diff")," represents a projection which contains elements from ",Object(i.b)("inlineCode",{parentName:"p"},"collA")," those\nare not contained in ",Object(i.b)("inlineCode",{parentName:"p"},"collB"),"."),Object(i.b)("h2",null,"Composing projections"),Object(i.b)("p",null,"But the nicest thing about projections is what they are composable. That means\nyou can easily compose complex projections from primitives like ",Object(i.b)("inlineCode",{parentName:"p"},"Capped")," or\n",Object(i.b)("inlineCode",{parentName:"p"},"Filtered")," as building blocks."),Object(i.b)("p",null,'As an example consider a projection which represents "10 most liked today\'s\nposts from Facebook timeline":'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"timeline = getFacebookTimeline \"andrey.popp\"\n\ntodays = new Filtered(timeline,\n  filter: (post) -> post.get('date').isToday())\n\nmostLiked = new Capped(todays,\n  comparator: (post) -> - post.get('likes').length)\n")),Object(i.b)("p",null,"Now ",Object(i.b)("inlineCode",{parentName:"p"},"mostLiked")," contains exactly needed subset of elements from ",Object(i.b)("inlineCode",{parentName:"p"},"timeline"),"."),Object(i.b)("h2",null,"Getting started with the library"),Object(i.b)("p",null,"As you can see from the examples the library exposes itself as a CommonJS module\n(using ",Object(i.b)("inlineCode",{parentName:"p"},"require()")," calls to get dependencies). This became possible because of\nexcellent ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"http://browserify.org"}),"Browserify")," library which bundles CommonJS modules into a single\nfile."),Object(i.b)("p",null,"That also means that ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/andreypopp/backbone.projections"}),"Backbone.Projections")," being a CommonJS module is also\ninstallable via ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"http://npmjs.org/package/backbone.projections"}),"npm")," with a"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"% npm install backbone.projections\n")),Object(i.b)("p",null,"After that you should be able to use it in a CommonJS environment in Node.js or\nin browser (via Browserify) by simply calling ",Object(i.b)("inlineCode",{parentName:"p"},"require('backbone.projections')"),"\nas seen in the examples."),Object(i.b)("p",null,"Development takes place at the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/andreypopp/backbone.projections"}),"andreypopp/backbone.projections")," GitHub repo\nso you can submit you feedback (bugs or feature proposals) or contributions\nthere."))}b.isMDXComponent=!0},WAFX:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/writings/2013-05-15-projections-for-backbone-collections",function(){var e=t("RgvC");return{page:e.default||e}}])}},[["WAFX","5d41","9da1"]]]);